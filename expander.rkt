;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#lang br

(provide (rename-out [golfscript-module-begin #%module-begin]
                     [golfscript-top #%top]))
(provide #%app #%datum #%top-interaction require)
(provide (matching-identifiers-out #rx"^gs-" (all-defined-out)))

;;; Rquires for gs-~ definition.
(require golfscript/parser golfscript/tokenizer brag/support)
(require racket/block)

;;; Global data and data types.
(define stack empty)
(define globals (make-hash))
(define builtins (make-hash))
(define undefined-var 'undefined)
(struct stack-mark (id))

;; For eval we need a namespace anchor.
(define-namespace-anchor gs)
(define gs-namespace (namespace-anchor->namespace gs))

;;; Module begin.
(define-macro (golfscript-module-begin PROGRAM)
  #'(#%module-begin
     PROGRAM))

;;; Top
;; Alter top level undefined behavior. Ignore undefined variables.
(define-macro (golfscript-top . ID)
  (if (identifier-binding #'ID) #'ID #'(void)))

;;; Syntax
(define-macro (gs-program EXPR ...)
  ;; Vars are self-evaluating so all we need to do is display the stack.
  (syntax/loc caller-stx
    (block
     EXPR ...
     (gs-display-stack))))

(define-macro (gs-var VAR)
  (syntax/loc caller-stx (gs-val VAR)))

(define-macro (gs-string STRING)
  (syntax/loc caller-stx (gs-push! STRING)))

(define-macro (gs-block EXPR ...)
  (syntax/loc caller-stx (gs-push! (lambda () EXPR ...))))

(define-macro-cases gs-list
  [(gs-list "[")
   ;; Mark stack position, and pop everything between it and top of stack.
   (syntax/loc caller-stx
     (gs-push! (stack-mark (gensym))))]
  [(gs-list "]")
   ;; Pop until we reach a stack mark or stack is empty.
   (syntax/loc caller-stx
     (let ([top (gs-pop! #:return-stack-mark? #t)]
           [return-list empty])
       (until (or (empty? stack) (stack-mark? top))
              (set! return-list (cons top return-list))
              (set! top (gs-pop! #:return-stack-mark? #t)))
       ;; If the last pop was a stack-mark ignore it, but if not, add it in.
       (when (not (stack-mark? top))
         (set! return-list (cons top return-list)))
       (gs-push! return-list)))])

(define-macro (gs-assignment EXPR (gs-var VAR))
  (syntax/loc caller-stx
    (begin
      EXPR
      (define VAR (gs-peek)))))

(define-macro (gs-comment COMMENT)
  #'(void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Internal functions generated by syntax macros.
(define (gs-display-stack)
  (display stack))

(define (gs-val a-var)
  (display "gs-val ")
  (writeln a-var)
  (cond
    [(procedure? a-var) (a-var)]
    ;; Numbers have their literal value as their default value.
    [(number? a-var) (gs-push! a-var)]
    ;; Undefined values are ignored. Otherwise we push the new vlaue to the stack.
    [(not (void? a-var)) (gs-push! a-var)]
    ))

(define (stack-height) (length stack))

(define (gs-push! value)
  (display "gs-push! ")
  (writeln value)
  (set! stack (cons value stack)))

(define (gs-pop! #:return-stack-mark? [return-stack-mark? #f])
  (display "gs-pop! stack")
  (writeln stack)
  (if return-stack-mark?
      (let ([top (first stack)])
        (set! stack (rest stack))
        top)
      (let ([top (first stack)]
            [found-stack-marks empty])
        (set! stack (rest stack))
        (while (stack-mark? top)
               ;; Skip stack marks.
               (set! found-stack-marks (cons top found-stack-marks))
               (set! top (first stack))
               (set! stack (rest stack)))
        ;; Return any stack marks to the stack and return.
        (for ([mark (in-list found-stack-marks)])
          (gs-push! mark))
        top)))

(define (gs-peek)
  (first stack))

(define (gs-builtin? a-var)
  (hash-has-key? builtins a-var))

(define (gs-builtin! a-var)
  ((hash-ref builtins a-var)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Builtin golfscript functions. All are mutating because they pop args from the stack.
;;; It's not explicit in the tutorial, but args are ordered left to right, not
;;; in the order they are popped. So in a two argument function, the second argument
;;; is at the top of the stack.

;; Builtins shadow base names, so rename on export.
(provide (rename-out [gs-+ +]
                     [gs-- -]
                     [gs-* *]
                     [gs-~ ~]))
  
(define (gs-+)
  (define second (gs-pop!))
  (gs-push! (+ (gs-pop!) second)))
(define (gs--)
  (define second (gs-pop!))
  (gs-push! (- (gs-pop!) second)))
(define (gs-*)
  (define second (gs-pop!))
  (gs-push! (* (gs-pop!) second)))

(define (gs-~)
  (let ([arg (gs-pop!)])
    (cond
      [(number? arg) (gs-push! (bitwise-not arg))]
      [(string? arg) (eval (parse-to-datum (apply-tokenizer make-tokenizer arg))
                           gs-namespace)]
      [(procedure? arg) (arg)]
      [(list? arg) (for ([i (in-list arg)]) (gs-push! i))])))
