;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#lang br

(provide (rename-out [golfscript-module-begin #%module-begin]
                     [golfscript-top #%top]))
(provide #%app #%datum #%top-interaction require)
(provide (matching-identifiers-out #rx"^gs-" (all-defined-out)))

;;; Rquires for gs-~ definition.
(require golfscript/parser golfscript/tokenizer brag/support)
(require racket/block)

;;; Global data and data types.
(define gs-stack (make-parameter empty))
(define globals (make-hash))
(define builtins (make-hash))
(define undefined-var 'undefined)
(define gs-program-result (make-parameter ""))
(define gs-namespace (make-parameter (make-empty-namespace)))
(define-namespace-anchor gs-expander-ns)
(struct stack-mark (id))
(struct gs-block-data (proc repr))


;;; Module begin.
(define-macro (golfscript-module-begin PROGRAM)
  #'(#%module-begin
     (provide gs-program-result gs-stack)
     (define-namespace-anchor gs-runtime-ns)
     (parameterize ([current-namespace (namespace-anchor->namespace gs-runtime-ns)])
       (displayln (namespace-mapped-symbols (current-namespace)))
       PROGRAM)))

;;; Top
;; Alter top level undefined behavior. Ignore undefined variables.
(define-macro (golfscript-top . ID)
  (if (identifier-binding #'ID) #'ID #'(void)))

;;; Syntax
(define-macro (gs-program EXPR ...)
  ;; Vars are self-evaluating so all we need to do is display the stack.
  (syntax/loc caller-stx
    (block
     EXPR ...
     (displayln `("FINAL STACK" ,(gs-stack)))
     (gs-program-result (gs-display-stack)))))

(define-macro (gs-eval EXPR ...)
  (syntax/loc caller-stx
    (block EXPR ...)))

(define-macro (gs-var VAR)
  (syntax/loc caller-stx (gs-val VAR)))

(define-macro (gs-string STRING)
  (syntax/loc caller-stx (gs-push! gs-stack STRING)))

(define-macro-cases gs-block
  [(gs-block EXPR1 EXPRN ...)
   (syntax/loc caller-stx
     (gs-push! gs-stack
               (gs-block-data
                (lambda () EXPR1 EXPRN ...)
                (gs-block-repr (gs-block EXPR1 EXPRN ...)))))]
  [(gs-block)
   (syntax/loc caller-stx
     (gs-push! gs-stack
               (gs-block-data
                (lambda () (void))
                (gs-block-repr (gs-block)))))])

(define-macro-cases gs-block-repr
  [(gs-block-repr (gs-block EXPR ...))
   #`(string-append
      "{"
      (string-join (list (gs-block-repr EXPR) ...) "")
      "}")]
  [(gs-block-repr (HEAD ARG)) (gs-string-repr (syntax->datum #'ARG))])

(begin-for-syntax
  (require racket/string)
  (define (gs-string-repr arg)
    (cond
      ; No need to address procedures because gs-block-repr handles that.
      [(number? arg) (number->string arg)]
      ; Check for list delimiters before strings, because they look like strings.
      [(or (equal? arg "[") (equal? arg "]")) arg]
      [(string? arg) (string-append "\"" arg "\"")]
      [(symbol? arg) (symbol->string arg)]
      [(list? arg) (string-append "["
                                  (string-join (map gs-string-repr arg) " ")
                                  "]")])))

(define-macro-cases gs-list
  [(gs-list "[")
   ;; Mark stack position, and pop everything between it and top of stack.
   (syntax/loc caller-stx
     (gs-push! gs-stack (stack-mark (gensym))))]
  [(gs-list "]")
   ;; Pop until we reach a stack mark or stack is empty.
   (syntax/loc caller-stx
     (let ([top (gs-pop! gs-stack #:return-stack-mark? #t)]
           [return-list empty])
       (until (or (empty? (gs-stack)) (stack-mark? top))
              (set! return-list (cons top return-list))
              (set! top (gs-pop! gs-stack #:return-stack-mark? #t)))
       ;; If the last pop was a stack-mark ignore it, but if not, add it in.
       (when (not (stack-mark? top))
         (set! return-list (cons top return-list)))
       (gs-push! gs-stack return-list)))])

(define-macro (gs-assignment EXPR (gs-var VAR))
  (syntax/loc caller-stx
    (begin
      EXPR
      (define VAR (gs-peek gs-stack)))))

(define-macro (gs-comment COMMENT)
  #'(void))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Internal functions generated by syntax macros.
(define (gs-display-stack)
  ;Stack must be reversed to display with top on right.
  (gs-stack (reverse (gs-stack)))
  (define result
    (string-trim
     (with-output-to-string
       (λ () (until (empty? (gs-stack)) (gs-display (gs-pop!  gs-stack)))))
     "\""))
  (displayln "RESULT")
  (displayln result)
  result)

(define (gs-display value)
  (if (gs-block-data? value)
      (display (gs-block-data-repr value))
      (display value)))

(define (stack-height) (length (gs-stack)))

(define (gs-push! a-stack value)
  (displayln `(gs-push! ,a-stack ,value))
  (a-stack (cons value (a-stack))))

(define (gs-pop! a-stack #:return-stack-mark? [return-stack-mark? #f])
  (if return-stack-mark?
      (let ([top (first (a-stack))])
        (a-stack (rest (a-stack)))
        top)
      (let ([top (first (a-stack))]
            [found-stack-marks empty])
        (a-stack (rest (a-stack)))
        (while (stack-mark? top)
               ;; Skip stack marks.
               (set! found-stack-marks (cons top found-stack-marks))
               (set! top (first (a-stack)))
               (a-stack (rest (a-stack))))
        ;; Return any stack marks to the stack and return.
        (for ([mark (in-list found-stack-marks)])
          (gs-push! a-stack mark))
        top)))

(define (gs-val a-var)
  (display "gs-val ")
  (displayln a-var)
  (cond
    [(gs-block-data? a-var) ((gs-block-data-proc a-var gs-stack))]
    [(procedure? a-var) (a-var gs-stack)]
    ;; Numbers have their literal value as their default value.
    [(number? a-var) (gs-push! gs-stack a-var)]
    ;; Undefined values are ignored. Otherwise we push the new vlaue to the stack.
    [(not (void? a-var)) (gs-push! gs-stack a-var)]
    ))


(define (gs-peek a-stack)
  (first (a-stack)))

(define (gs-builtin? a-var)
  (hash-has-key? builtins a-var))

(define (gs-builtin! a-var)
  ((hash-ref builtins a-var)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Builtin golfscript functions. All are mutating because they pop args from the stack.
;;; It's not explicit in the tutorial, but args are ordered left to right, not
;;; in the order they are popped. So in a two argument function, the second argument
;;; is at the top of the stack.

;; Builtins shadow base names, so rename on export.
(provide (rename-out [gs-tilde ~]
                     [gs-backtick |`|]
                     [gs-! !]
                     [gs-@ |@|]
                     [gs-$ $]
                     [gs-+ +]
                     [gs-- -]
                     [gs-* *]
                     ))

(define (gs-tilde gs-stack)
  (writeln "gs-tilde")
  (let ([arg (gs-pop! gs-stack)])
    (cond
      [(number? arg) (gs-push! gs-stack (bitwise-not arg))]
      [(string? arg) (eval `(gs-eval ,@(cdr (parse-to-datum (apply-tokenizer make-tokenizer arg)))))]
      [(gs-block-data? arg) ((gs-block-data-proc arg))]
      [(list? arg) (for ([i (in-list arg)]) (gs-push! gs-stack i))])))

(define (gs-backtick gs-stack)
  (define arg (gs-pop! gs-stack))
  (define arg-repr
    (cond
      [(gs-block-data? arg) (gs-block-data-repr arg)]
      [else (gs-string-repr arg)]))
  (gs-push! gs-stack (gs-string-repr arg-repr)))

(define (gs-string-repr arg)
  (cond
    ; No need to address procedures because gs-backtick handles that.
    [(number? arg) (number->string arg)]
    ; Check for list delimiters before strings, because they look like strings.
    [(or (equal? arg "[") (equal? arg "]")) arg]
    [(string? arg) (string-append "\"" arg "\"")]
    [(list? arg) (string-append "["
                                (string-join (map gs-string-repr arg) " ")
                                "]")]))

(define (gs-! a-stack)
  (define arg (gs-pop! a-stack))
  (gs-push!
   a-stack
   (if
    (or (equal? arg 0)
        (equal? arg empty)
        (equal? arg "")
        (and (gs-block-data? arg) (equal? (gs-block-data-repr arg) "{}")))
    1
    0)))

(define (gs-$ a-stack)
  (define top (gs-peek a-stack))
  (cond
    ; list block or string block. Sort by block as key function.
    [(gs-block-data? top)
     (let-values ([(arg2 arg1) (values (gs-pop! a-stack) (gs-pop! a-stack))])
       (let* ([key-proc (gs-block-data-proc arg2)]
              [cmp (λ (x y) (gs-lt (key-proc) (key-proc)))])
         (cond
           [(string? arg1)
            (gs-push! a-stack (list->string (sort (string->list arg1) cmp)))]
           [(list? arg1) (gs-push! a-stack (sort arg1 cmp))])))]
    ; integer. Index value off stack and copy to top.
    [else (begin
            (define arg (gs-pop! a-stack))
            (last (take (a-stack) arg)))]))

(define (gs-@ a-stack)
  (define-values (arg3 arg2 arg1)
    (values (gs-pop! a-stack) (gs-pop! a-stack) (gs-pop! a-stack)))
  (gs-push! a-stack arg2)
  (gs-push! a-stack arg3)
  (gs-push! a-stack arg1))
  
  (define (gs-+ gs-stack)
    (define second (gs-pop! gs-stack))
    (define first (gs-pop! gs-stack))
    (println `(gs-+ ,first ,second))
    (gs-push! gs-stack (+ first second)))
  (define (gs-- gs-stack)
    (define second (gs-pop! gs-stack))
    (gs-push! gs-stack (- (gs-pop! gs-stack) second)))
  (define (gs-* gs-stack)
    (define second (gs-pop! gs-stack))
    (gs-push! gs-stack (* (gs-pop! gs-stack) second)))
  